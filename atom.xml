<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>林小墨的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-08T02:53:29.596Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>林小墨</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>力扣#1</title>
    <link href="http://yoursite.com/2020/03/08/%E5%8A%9B%E6%89%A3-1/"/>
    <id>http://yoursite.com/2020/03/08/%E5%8A%9B%E6%89%A3-1/</id>
    <published>2020-03-08T02:28:08.000Z</published>
    <updated>2020-03-08T02:53:29.596Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1. 两数之和"></a><a href="https://leetcode-cn.com/problems/two-sum/" target="_blank" rel="noopener">1. 两数之和</a></h4><p>难度简单</p><p>给定一个整数数组 <code>nums</code> 和一个目标值 <code>target</code>，请你在该数组中找出和为目标值的那 <strong>两个</strong> 整数，并返回他们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p><p><strong>示例:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">给定 nums &#x3D; [2, 7, 11, 15], target &#x3D; 9</span><br><span class="line"></span><br><span class="line">因为 nums[0] + nums[1] &#x3D; 2 + 7 &#x3D; 9</span><br><span class="line">所以返回 [0, 1]</span><br></pre></td></tr></table></figure><p>分析：使用哈希表</p><p>因为题目要求找到两个整数且他们的和为目标值，因此我们可以让目标值都与每一个数相减，将差放入hasmap中，通过一次遍历，只要能够在hasmap里找到当前的数，那么当前的数和hasmap所对应的数就是我们要找的答案。\</p><p>时间复杂度为：<em>O</em>(<em>n</em>)</p><p>空间复杂度为：<em>O</em>(<em>n</em>)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">twoSum</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">maps := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>)</span><br><span class="line">result := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> index, num := <span class="keyword">range</span> nums &#123;</span><br><span class="line">_, isTrue := maps[target-num]</span><br><span class="line"><span class="keyword">if</span> isTrue &#123;</span><br><span class="line">result = <span class="built_in">append</span>(result, maps[target-num])</span><br><span class="line">result = <span class="built_in">append</span>(result, index)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">maps[num] = index</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：<img src="http://www.lxmcloud.cn/images/blog/leetcode/lc1.jpg" alt=""></p><p>完整代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> nums = []<span class="keyword">int</span>&#123;<span class="number">2</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>&#125;</span><br><span class="line"><span class="comment">//nums := []int&#123;2, 7, 11, 15&#125;</span></span><br><span class="line">target := <span class="number">9</span></span><br><span class="line">fmt.Println(twoSum(nums, target))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">twoSum</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">maps := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>)</span><br><span class="line">result := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> index, num := <span class="keyword">range</span> nums &#123;</span><br><span class="line">_, isTrue := maps[target-num]</span><br><span class="line"><span class="keyword">if</span> isTrue &#123;</span><br><span class="line">result = <span class="built_in">append</span>(result, maps[target-num])</span><br><span class="line">result = <span class="built_in">append</span>(result, index)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">maps[num] = index</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-两数之和&quot;&gt;&lt;a href=&quot;#1-两数之和&quot; class=&quot;headerlink&quot; title=&quot;1. 两数之和&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/two-sum/&quot; target=&quot;_blank&quot;
      
    
    </summary>
    
    
      <category term="力扣" scheme="http://yoursite.com/categories/%E5%8A%9B%E6%89%A3/"/>
    
      <category term="1" scheme="http://yoursite.com/categories/%E5%8A%9B%E6%89%A3/1/"/>
    
    
      <category term="力扣" scheme="http://yoursite.com/tags/%E5%8A%9B%E6%89%A3/"/>
    
  </entry>
  
  <entry>
    <title>博客自定义主题next</title>
    <link href="http://yoursite.com/2020/02/23/%E5%8D%9A%E5%AE%A2%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%BB%E9%A2%98next/"/>
    <id>http://yoursite.com/2020/02/23/%E5%8D%9A%E5%AE%A2%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%BB%E9%A2%98next/</id>
    <published>2020-02-23T06:33:38.000Z</published>
    <updated>2020-02-25T12:57:21.493Z</updated>
    
    <content type="html"><![CDATA[<h3 id="头像设置"><a href="#头像设置" class="headerlink" title="头像设置"></a>头像设置</h3><p>打开主题里 _config.yml文件找到avarar，后面填入头像的链接</p><p><img src="https://www.lxmcloud.cn/images/blog/boke/avatar2.jpg" alt=""></p><p>成品：</p><p><img src="https://www.lxmcloud.cn/images/blog/boke/avatar3.jpg" alt=""></p><p>接下来将它变成圆形且可以旋转，我们找到next\source\css_common\components\sidebar\sidebar-author.styl文件</p><p><img src="https://www.lxmcloud.cn/images/blog/boke/avator4.jpg" alt=""></p><p>修改成：</p><p><img src="https://www.lxmcloud.cn/images/blog/boke/avatar5.jpg" alt=""></p><h3 id="设置动态背景"><a href="#设置动态背景" class="headerlink" title="设置动态背景"></a>设置动态背景</h3><p>编辑 <strong>主题配置文件</strong>， 搜索 <code>canvas_nest</code> 或 <code>three_waves</code>，根据您的需求设置值为 <code>true</code> 或者 <code>false</code> 即可：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># canvas_nest</span></span><br><span class="line"><span class="attr">canvas_nest:</span> <span class="literal">true</span> <span class="string">//开启动画</span></span><br><span class="line"><span class="attr">canvas_nest:</span> <span class="literal">false</span> <span class="string">//关闭动画</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># three_waves</span></span><br><span class="line"><span class="attr">three_waves:</span> <span class="literal">true</span> <span class="string">//开启动画</span></span><br><span class="line"><span class="attr">three_waves:</span> <span class="literal">false</span> <span class="string">//关闭动画</span></span><br></pre></td></tr></table></figure><h3 id="设置RSS"><a href="#设置RSS" class="headerlink" title="设置RSS"></a>设置RSS</h3><p>在hexo的根目录下执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><p>在根目录下的/theme/next/_config.yml文件中添加配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feed:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">rss2</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">rss2.xml</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">hub:</span></span><br><span class="line">    <span class="attr">content:</span> <span class="string">'true'</span></span><br></pre></td></tr></table></figure><h3 id="设置访问量观看"><a href="#设置访问量观看" class="headerlink" title="设置访问量观看"></a>设置访问量观看</h3><p>在根目录下的/theme/next/_config.yml文件中修改配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line">  <span class="comment"># count values only if the other configs are false</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># custom uv span for the whole site</span></span><br><span class="line">  <span class="attr">site_uv:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">site_uv_header:</span> <span class="string">&lt;i</span> <span class="string">class="fa</span> <span class="string">fa-user"&gt;&lt;/i&gt;访问人数</span></span><br><span class="line">  <span class="attr">site_uv_footer:</span></span><br><span class="line">  <span class="comment"># custom pv span for the whole site</span></span><br><span class="line">  <span class="attr">site_pv:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">site_pv_header:</span> <span class="string">&lt;i</span> <span class="string">class="fa</span> <span class="string">fa-eye"&gt;&lt;/i&gt;总访问量</span></span><br><span class="line">  <span class="attr">site_pv_footer:</span> <span class="string">次</span></span><br><span class="line">  <span class="comment"># custom pv span for one page only</span></span><br><span class="line">  <span class="attr">page_pv:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">page_pv_header:</span> <span class="string">&lt;i</span> <span class="string">class="fa</span> <span class="string">fa-file-o"&gt;&lt;/i&gt;浏览</span></span><br><span class="line">  <span class="attr">page_pv_footer:</span> <span class="string">次</span></span><br></pre></td></tr></table></figure><p><img src="https://www.lxmcloud.cn/images/blog/boke/num.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;头像设置&quot;&gt;&lt;a href=&quot;#头像设置&quot; class=&quot;headerlink&quot; title=&quot;头像设置&quot;&gt;&lt;/a&gt;头像设置&lt;/h3&gt;&lt;p&gt;打开主题里 _config.yml文件找到avarar，后面填入头像的链接&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https:/
      
    
    </summary>
    
    
      <category term="博客" scheme="http://yoursite.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="博客" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>我的博客如何建立(二)</title>
    <link href="http://yoursite.com/2020/02/23/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%A6%82%E4%BD%95%E5%BB%BA%E7%AB%8B2/"/>
    <id>http://yoursite.com/2020/02/23/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%A6%82%E4%BD%95%E5%BB%BA%E7%AB%8B2/</id>
    <published>2020-02-23T02:24:23.000Z</published>
    <updated>2020-02-25T12:57:23.859Z</updated>
    
    <content type="html"><![CDATA[<p>需要条件：hexo    （github账号）</p><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p>在自己电脑G盘（每个人的各不相同）目录下新建文件夹 blog，按住点击鼠标右键git bash here（或者前敲入：$ mkdir blog ，后$ cd blog）</p><p><img src="https://pic4.zhimg.com/80/v2-47b743555911a9fbb43aa2313f9183db_hd.jpg" alt=""></p><p>然后敲入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install -g hexo-cli</span></span><br></pre></td></tr></table></figure><p>国内可能会出问题或者速度过慢，我们就可以采用cnpm下载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install -g cnpm --registry=https://registry.npm.taobao.org</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cnpm install hexo-cli -g</span></span><br></pre></td></tr></table></figure><p>安装成功后：敲入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo -v</span></span><br></pre></td></tr></table></figure><p><img src="https://www.lxmcloud.cn/images/blog/boke/hexo-v.jpg" alt=""></p><p>初始化hexo</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo init</span></span><br></pre></td></tr></table></figure><p>启动hexo</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">hexo s</span></span><br></pre></td></tr></table></figure><p><img src="https://www.lxmcloud.cn/images/blog/boke/hexo-s.jpg" alt=""></p><p>在浏览器输入       localhost:4000</p><p><img src="https://www.lxmcloud.cn/images/blog/boke/hexochushiye.jpg" alt=""></p><p>这样子博客就初步完成了</p><h3 id="部署到github上"><a href="#部署到github上" class="headerlink" title="部署到github上"></a>部署到github上</h3><p>首先我们需要有一个自己的github账号</p><p><img src="https://www.lxmcloud.cn/images/blog/boke/github-repostiories2.jpg" alt=""></p><p>注意Repository name应填写username.github.io比如我的便是xiaomolin.github.io</p><p>但是因为我已经创建过了所以这里会出现红字</p><p><img src="https://www.lxmcloud.cn/images/blog/boke/chuangjian.jpg" alt=""></p><p>然后点击Create repository</p><h4 id="配置SSH"><a href="#配置SSH" class="headerlink" title="配置SSH"></a>配置SSH</h4><h5 id="设置Git的user-name和email"><a href="#设置Git的user-name和email" class="headerlink" title="设置Git的user name和email"></a>设置Git的user name和email</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.name <span class="string">"github用户名"</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.email <span class="string">"注册GitHub的邮箱"</span></span></span><br></pre></td></tr></table></figure><h5 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h5><p>首先要检查自己电脑上是否现有的 SSH key：</p><p><img src="https://pic1.zhimg.com/80/v2-c5428344556ebfe25fee325c7daa5548_hd.jpg" alt=""></p><p>说明这是第一次使用git，接下来生成ssh key</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh-keygen -t rsa -C <span class="string">"邮箱"</span></span></span><br></pre></td></tr></table></figure><p>然后按三下回车，此处使用知乎阿fa的流程</p><p><img src="https://pic2.zhimg.com/80/v2-26799795ac0552d06a81586a130b25ad_hd.jpg" alt=""></p><p><img src="https://pic4.zhimg.com/80/v2-2cb74afa9b7c9077b33da54d4513523b_hd.jpg" alt=""></p><p>在回车中会提示你输入一个密码，这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入。这个设置是防止别人往你的项目里提交内容。</p><p><img src="https://pic3.zhimg.com/80/v2-62eb6df0af0894ffd2344193732065d6_hd.jpg" alt=""></p><p>此时，在用户文件夹（如：C:\Users\阿发）下就会有一个新的文件夹.ssh，里面有刚刚创建的ssh密钥文件id_rsa和id_rsa.pub</p><p><img src="https://www.lxmcloud.cn/images/blog/boke/ssh.jpg" alt=""></p><h5 id="登陆Github-添加-ssh"><a href="#登陆Github-添加-ssh" class="headerlink" title="登陆Github, 添加 ssh"></a>登陆Github, 添加 ssh</h5><p><img src="https://www.lxmcloud.cn/images/blog/boke/setting.jpg" alt=""></p><p>点击用户头像，然后点击显示的Settings(设置)选项；在用户设置栏，点击SSH and GPG keys选项，然后点击New SSH key(新建SSH)按钮；可以使用notepad++打开id_rsa.pub并将其中中的内容复制到Key文本框中，然后点击Add SSH key(添加SSH)按钮；</p><p><img src="https://www.lxmcloud.cn/images/blog/boke/ss.jpg" alt=""></p><p>测试git是否与github连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/80/v2-1f241d42e10507b2f928acf99686c139_hd.jpg" alt=""></p><p>后敲入:yes</p><h2 id="发布到github"><a href="#发布到github" class="headerlink" title="发布到github"></a><strong>发布到github</strong></h2><p>在blog文件夹中使用Notepad++打开_config.yml，溜到最后…….</p><p><img src="https://pic1.zhimg.com/80/v2-f8ad78fa508b36173f419319512c6fe0_hd.jpg" alt=""></p><p>修改成：</p><p><img src="https://www.lxmcloud.cn/images/blog/boke/deploy.jpg" alt=""></p><p>reop的链接为：</p><p><img src="https://www.lxmcloud.cn/images/blog/boke/lj.jpg" alt=""></p><h5 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">hexo n <span class="string">"文章名字"</span></span></span><br></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/80/v2-1c576239e180ec2882160b8f910bc5bd_hd.jpg" alt=""></p><p>清除缓存</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">hexo clean</span></span><br></pre></td></tr></table></figure><p><img src="https://www.lxmcloud.cn/images/blog/boke/clean.jpg" alt=""></p><p>hexo generate(hexo g生成，每次修改本地文件后，需要才能保存)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">hexo g</span></span><br></pre></td></tr></table></figure><p><img src="https://www.lxmcloud.cn/images/blog/boke/hg.jpg" alt=""></p><p>要部署到github上还需安装一个插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">npm install hexo-deployer-git --save</span></span><br></pre></td></tr></table></figure><p>然后部署</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">hexo d</span></span><br></pre></td></tr></table></figure><p>打开自己网址，进行验证是否成功</p><p>到此为止博客基本搭建完成</p><p>参考：<a href="https://zhuanlan.zhihu.com/p/38122668" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/38122668</a></p><p>​            <a href="https://segmentfault.com/a/1190000002645623" target="_blank" rel="noopener">https://segmentfault.com/a/1190000002645623</a></p><p>​            <a href="https://www.bilibili.com/video/av44544186?from=search&amp;seid=8632079203797410486" target="_blank" rel="noopener">https://www.bilibili.com/video/av44544186?from=search&amp;seid=8632079203797410486</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;需要条件：hexo    （github账号）&lt;/p&gt;
&lt;h3 id=&quot;安装hexo&quot;&gt;&lt;a href=&quot;#安装hexo&quot; class=&quot;headerlink&quot; title=&quot;安装hexo&quot;&gt;&lt;/a&gt;安装hexo&lt;/h3&gt;&lt;p&gt;在自己电脑G盘（每个人的各不相同）目录下新建文
      
    
    </summary>
    
    
      <category term="博客" scheme="http://yoursite.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="博客" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>tensorflow2.0 用卷积层报错</title>
    <link href="http://yoursite.com/2020/02/17/tensorflow2-0-%E7%94%A8%E5%8D%B7%E7%A7%AF%E5%B1%82%E6%8A%A5%E9%94%99/"/>
    <id>http://yoursite.com/2020/02/17/tensorflow2-0-%E7%94%A8%E5%8D%B7%E7%A7%AF%E5%B1%82%E6%8A%A5%E9%94%99/</id>
    <published>2020-02-17T08:29:46.000Z</published>
    <updated>2020-02-17T08:39:48.928Z</updated>
    
    <content type="html"><![CDATA[<h1 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UnknownError: Failed to get convolution algorithm. This <span class="keyword">is</span> probably because cuDNN </span><br><span class="line">failed to initialize, so <span class="keyword">try</span> looking to see <span class="keyword">if</span> a warning log message was printed above. [Op:Conv2D]</span><br></pre></td></tr></table></figure><p>尝试解决办法：</p><p>安装可行版本的CUDA和cuDNN，发现问题仍未解决。</p><p>怀疑有可能是显存不足，打开nvidia msi 查看，发现tensorflow一下子把显存占完了，导致后面用卷积层时无法初始化cuDNN</p><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>我们只要把tf设置为按需申请显存就行了．</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tensorflow.compat.v1 <span class="keyword">import</span> ConfigProto</span><br><span class="line"><span class="keyword">from</span> tensorflow.compat.v1 <span class="keyword">import</span> InteractiveSession</span><br><span class="line">config = ConfigProto()</span><br><span class="line">config.gpu_options.allow_growth = <span class="literal">True</span></span><br><span class="line">session = InteractiveSession(config=config)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;报错信息&quot;&gt;&lt;a href=&quot;#报错信息&quot; class=&quot;headerlink&quot; title=&quot;报错信息&quot;&gt;&lt;/a&gt;报错信息&lt;/h1&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p
      
    
    </summary>
    
    
      <category term="tensorflow" scheme="http://yoursite.com/categories/tensorflow/"/>
    
    
      <category term="tensorflow" scheme="http://yoursite.com/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>tensorflow学习(一)</title>
    <link href="http://yoursite.com/2020/02/17/tensorflow/"/>
    <id>http://yoursite.com/2020/02/17/tensorflow/</id>
    <published>2020-02-17T07:52:31.000Z</published>
    <updated>2020-02-18T09:43:05.340Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用tensorflow2-0-进行线性拟合"><a href="#使用tensorflow2-0-进行线性拟合" class="headerlink" title="使用tensorflow2.0 进行线性拟合"></a>使用tensorflow2.0 进行线性拟合</h2><p>拟合直线：y=0.1x+0.3，很简单机器学习任务，思路很简单就是初始化Weight，biases，使用损失函数MSE来判断拟合的效果，使用梯度下降进行参数的更新。其实就是一个最小二乘法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tensorflow.compat.v1 <span class="keyword">import</span> ConfigProto</span><br><span class="line"><span class="keyword">from</span> tensorflow.compat.v1 <span class="keyword">import</span> InteractiveSession</span><br><span class="line">config = ConfigProto()</span><br><span class="line">config.gpu_options.allow_growth = <span class="literal">True</span></span><br><span class="line">session = InteractiveSession(config=config)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow.compat.v1 <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><p>创建数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#create data</span><br><span class="line">x_data &#x3D;np.random.rand(100).astype(np.float32)</span><br><span class="line">y_data &#x3D;x_data*0.1+0.3</span><br></pre></td></tr></table></figure><p>创建训练模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># create tensorflow structure</span></span><br><span class="line">Weights = tf.Variable(tf.random.uniform((<span class="number">1</span>,), <span class="number">-1.0</span>, <span class="number">1.0</span>))</span><br><span class="line">biases = tf.Variable(tf.zeros((<span class="number">1</span>,)))</span><br><span class="line"></span><br><span class="line">loss = <span class="keyword">lambda</span>: tf.keras.losses.MSE(y_data, Weights * x_data + biases)  </span><br><span class="line"><span class="comment"># alias: tf.losses.mse</span></span><br><span class="line">optimizer = tf.keras.optimizers.SGD(learning_rate=<span class="number">0.5</span>)  </span><br><span class="line"><span class="comment"># alias: tf.optimizers.SGD</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> step <span class="keyword">in</span> range(<span class="number">201</span>):</span><br><span class="line">    optimizer.minimize(loss, var_list=[Weights, biases])</span><br><span class="line">    <span class="keyword">if</span> step % <span class="number">20</span> == <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">"&#123;&#125; step, weights = &#123;&#125;, biases = &#123;&#125;"</span>.format(step, Weights.read_value(), biases.read_value()))  <span class="comment"># read_value函数可用numpy替换</span></span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">0 step, weights &#x3D; [-0.07186383], biases &#x3D; [0.53049165]</span><br><span class="line">20 step, weights &#x3D; [0.04541961], biases &#x3D; [0.32863754]</span><br><span class="line">40 step, weights &#x3D; [0.08702482], biases &#x3D; [0.3068079]</span><br><span class="line">60 step, weights &#x3D; [0.09691547], biases &#x3D; [0.30161843]</span><br><span class="line">80 step, weights &#x3D; [0.09926673], biases &#x3D; [0.30038476]</span><br><span class="line">100 step, weights &#x3D; [0.0998257], biases &#x3D; [0.30009148]</span><br><span class="line">120 step, weights &#x3D; [0.09995857], biases &#x3D; [0.30002174]</span><br><span class="line">140 step, weights &#x3D; [0.09999017], biases &#x3D; [0.30000517]</span><br><span class="line">160 step, weights &#x3D; [0.09999766], biases &#x3D; [0.30000123]</span><br><span class="line">180 step, weights &#x3D; [0.09999946], biases &#x3D; [0.3000003]</span><br><span class="line">200 step, weights &#x3D; [0.09999989], biases &#x3D; [0.30000007]</span><br></pre></td></tr></table></figure><p>最终预测出的答案和正确答案很接近</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;使用tensorflow2-0-进行线性拟合&quot;&gt;&lt;a href=&quot;#使用tensorflow2-0-进行线性拟合&quot; class=&quot;headerlink&quot; title=&quot;使用tensorflow2.0 进行线性拟合&quot;&gt;&lt;/a&gt;使用tensorflow2.0 进行线性
      
    
    </summary>
    
    
      <category term="tensorflow" scheme="http://yoursite.com/categories/tensorflow/"/>
    
    
      <category term="tensorflow" scheme="http://yoursite.com/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>tensorflow API学习(一)</title>
    <link href="http://yoursite.com/2020/02/17/tf%E7%9A%84api/"/>
    <id>http://yoursite.com/2020/02/17/tf%E7%9A%84api/</id>
    <published>2020-02-17T07:52:31.000Z</published>
    <updated>2020-02-19T12:13:17.004Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><p>Tensorflow是基于图（Graph）的计算系统。而图的节点则是由操作（Operation）来构成的，而图的各个节点之间则是由张量（Tensor）作为边来连接在一起的。所以Tensorflow的计算过程就是一个Tensor流图。Tensorflow的图则是必须在一个Session中来计算。</p><p><a href="http://www.tensorfly.cn/tfdoc/api_docs/python/client.html" target="_blank" rel="noopener">Session</a>提供了Operation执行和Tensor求值的环境</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="comment"># Build a graph.</span></span><br><span class="line">a = tf.constant([<span class="number">1.0</span>, <span class="number">2.0</span>])</span><br><span class="line">b = tf.constant([<span class="number">3.0</span>, <span class="number">4.0</span>])</span><br><span class="line">c = a * b</span><br><span class="line"></span><br><span class="line"><span class="comment"># Launch the graph in a session.</span></span><br><span class="line">sess = tf.compat.v1.Session()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Evaluate the tensor 'c'.</span></span><br><span class="line"><span class="keyword">print</span> sess.run(c)</span><br><span class="line">sess.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># result: [3., 8.]</span></span><br></pre></td></tr></table></figure><p>一个Session可能会拥有一些资源，例如Variable或者Queue。当我们不再需要该session的时候，需要将这些资源进行释放。有两种方式，</p><ul><li>调用session.close()方法；</li><li>使用with tf.Session()创建上下文（Context）来执行，当上下文退出时自动释放。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Using the `close()` method.  方法一</span></span><br><span class="line">sess = tf.Session()</span><br><span class="line">sess.run(...)</span><br><span class="line">sess.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Using the context manager.  方法二</span></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">  sess.run(...)</span><br></pre></td></tr></table></figure><p>Session类的构造函数如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf.compat.v1.Session.__init__(target=<span class="string">''</span>, graph=<span class="literal">None</span>, config=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p>如果<code>graph</code>在构造会话时未指定任何参数，则默认图形将在会话中启动。如果您<a href="https://www.tensorflow.org/api_docs/python/tf/Graph" target="_blank" rel="noopener"><code>tf.Graph()</code></a>在同一过程中使用一个以上的图（使用创建的图），则每个图必须使用不同的会话，但是每个图可以在多个会话中使用。在这种情况下，将要显式启动的图传递给会话构造函数通常更为清晰。</p><p>执行Operation或者求值Tensor有两种方式：</p><p>如果在创建Session时没有指定Graph，则该Session会加载默认Graph。如果在一个进程中创建了多个Graph，则需要创建不同的Session来加载每个Graph，而每个Graph则可以加载在多个Session中进行计算。</p><p>执行Operation或者求值Tensor有两种方式：</p><ul><li><p>调用Session.run()方法： 该方法的定义如下所示，参数fetches便是一个或者多个Operation或者Tensor。</p></li><li><pre><code class="python">tf.Session.run(fetches, feed_dict=<span class="literal">None</span>)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 调用Operation.run()或则Tensor.eval()方法： 这两个方法都接收参数session，用于指定在哪个session中计算。但该参数是可选的，默认为None，此时表示在进程默认session中计算。</span><br><span class="line"></span><br><span class="line">  &#96;&#96;&#96;python</span><br><span class="line">  import tensorflow as tf</span><br><span class="line">  </span><br><span class="line">  # Build a graph.</span><br><span class="line">  a &#x3D; tf.constant([1.0, 2.0])</span><br><span class="line">  b &#x3D; tf.constant([3.0, 4.0])</span><br><span class="line">  c &#x3D; a * b</span><br><span class="line">  </span><br><span class="line">  with tf.Session():</span><br><span class="line">     print c.eval()</span><br></pre></td></tr></table></figure></code></pre></li></ul><p>参考：<a href="https://www.cnblogs.com/lienhua34/p/5998853.html" target="_blank" rel="noopener">https://www.cnblogs.com/lienhua34/p/5998853.html</a></p><p>​            <a href="https://www.tensorflow.org/api_docs/python/tf/compat/v1/Session" target="_blank" rel="noopener">https://www.tensorflow.org/api_docs/python/tf/compat/v1/Session</a></p><h3 id="Variable"><a href="#Variable" class="headerlink" title="Variable"></a>Variable</h3><p>该<code>Variable()</code>构造函数需要为变量，其可以是一个初始值<code>Tensor</code>的任何类型和形状。此初始值定义变量的类型和形状。构造后，变量的类型和形状是固定的。可以使用分配方法之一更改该值。</p><p>常见用法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf;  </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np;   </span><br><span class="line">  </span><br><span class="line">a1 = tf.Variable(tf.random_normal(shape=[<span class="number">2</span>,<span class="number">3</span>], mean=<span class="number">0</span>, stddev=<span class="number">1</span>), name=<span class="string">'a1'</span>)</span><br><span class="line">a2 = tf.Variable(tf.constant(<span class="number">1</span>), name=<span class="string">'a2'</span>)</span><br><span class="line">a3 = tf.Variable(tf.ones(shape=[<span class="number">2</span>,<span class="number">3</span>]), name=<span class="string">'a3'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">sess.run(tf.global_variables_initializer())<span class="comment">#初始化</span></span><br><span class="line"><span class="keyword">print</span> sess.run(a1)</span><br><span class="line"><span class="keyword">print</span> sess.run(a2)</span><br><span class="line"><span class="keyword">print</span> sess.run(a3)</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">[[ <span class="number">0.76599932</span>  <span class="number">0.99722123</span> <span class="number">-0.89361787</span>]</span><br><span class="line"> [ <span class="number">0.19991693</span> <span class="number">-0.16539733</span>  <span class="number">2.16605783</span>]]</span><br><span class="line"><span class="number">1</span></span><br><span class="line">[[ <span class="number">1.</span>  <span class="number">1.</span>  <span class="number">1.</span>]</span><br><span class="line"> [ <span class="number">1.</span>  <span class="number">1.</span>  <span class="number">1.</span>]]</span><br></pre></td></tr></table></figure><p>更多用法请参考文档：<a href="https://www.tensorflow.org/api_docs/python/tf/Variable?hl=zh_cn" target="_blank" rel="noopener">https://www.tensorflow.org/api_docs/python/tf/Variable?hl=zh_cn</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Session&quot;&gt;&lt;a href=&quot;#Session&quot; class=&quot;headerlink&quot; title=&quot;Session&quot;&gt;&lt;/a&gt;Session&lt;/h3&gt;&lt;p&gt;Tensorflow是基于图（Graph）的计算系统。而图的节点则是由操作（Operation）来构
      
    
    </summary>
    
    
      <category term="tensorflow" scheme="http://yoursite.com/categories/tensorflow/"/>
    
    
      <category term="tensorflow" scheme="http://yoursite.com/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>我的博客如何建立(一)</title>
    <link href="http://yoursite.com/2020/02/13/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%A6%82%E4%BD%95%E5%BB%BA%E7%AB%8B1/"/>
    <id>http://yoursite.com/2020/02/13/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%A6%82%E4%BD%95%E5%BB%BA%E7%AB%8B1/</id>
    <published>2020-02-13T06:58:30.122Z</published>
    <updated>2020-02-23T12:12:33.247Z</updated>
    
    <content type="html"><![CDATA[<p>你需要准备好以下软件：</p><ul><li>Node.js环境</li><li>Git</li></ul><p><a href="[https://xiaomolin.github.io/2020/02/23/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%A6%82%E4%BD%95%E5%BB%BA%E7%AB%8B2/">我的博客如何建立二</a></p><h2 id="Nodejs"><a href="#Nodejs" class="headerlink" title="Nodejs"></a>Nodejs</h2><h3 id="下载nodejs"><a href="#下载nodejs" class="headerlink" title="下载nodejs"></a>下载nodejs</h3><p>官方连接 <a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">https://nodejs.org/zh-cn/</a></p><p>点击左边的版本下载</p><p><img src="https://img-blog.csdnimg.cn/20181121113436911.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JteV8xMjM0,size_16,color_FFFFFF,t_70" alt="avatar"></p><h3 id="安装Nodejs"><a href="#安装Nodejs" class="headerlink" title="安装Nodejs"></a>安装Nodejs</h3><p><img src="https://melvinchng.github.io/jekyll/81.png" alt="avatar"></p><p>保持默认设置即可，一路Next，安装很快就结束了。 然后我们检查一下是不是要求的组件都安装好了，同时按下<code>Win</code>和<code>R</code>，打开运行窗口</p><p>在新打开的窗口中输入<code>cmd</code>，敲击回车，打开命令行界面。 在打开的命令行界面中，输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>如果结果如下图所示，则说明安装正确，可以进行下一步了，如果不正确，则需要回头检查自己的安装过程。</p><p><img src="https://xuanwo.io/imgs/opinion/nodejs-test.png" alt=""></p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><h3 id="下载Git"><a href="#下载Git" class="headerlink" title="下载Git"></a>下载Git</h3><p>官方连接<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a></p><p><img src="https://stormsha.com/media/upload/20191114181049.png" alt=""></p><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p><img src="https://img.shangyexinzhi.com/xztest-image/article/2bb64d6361068e4a92c1f66e16b62c9e.png" alt=""></p><p>后面一路默认next即可</p><p><a href="[https://xiaomolin.github.io/2020/02/23/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%A6%82%E4%BD%95%E5%BB%BA%E7%AB%8B2/">我的博客如何建立二</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;你需要准备好以下软件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Node.js环境&lt;/li&gt;
&lt;li&gt;Git&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;[https://xiaomolin.github.io/2020/02/23/%E6%88%91%E7%9A%84%E5%8D%9
      
    
    </summary>
    
    
      <category term="博客" scheme="http://yoursite.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="博客" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
